diff --git a/toolkit/modules/NewTabUtils.jsm b/toolkit/modules/NewTabUtils.jsm
--- a/toolkit/modules/NewTabUtils.jsm
+++ b/toolkit/modules/NewTabUtils.jsm
@@ -933,7 +933,7 @@ var ActivityStreamProvider = {
       aUri,
       // Package up the icon data in an object if we have it; otherwise null
       (iconUri, faviconLength, favicon, mimeType, faviconSize) =>
-        resolve(iconUri ? {favicon, faviconLength, faviconSize, mimeType} : null),
+        resolve(iconUri ? {favicon, faviconLength, faviconRef: iconUri.ref, faviconSize, mimeType} : null),
       preferredWidth));
   },

diff --git a/toolkit/modules/tests/xpcshell/test_NewTabUtils.js b/toolkit/modules/tests/xpcshell/test_NewTabUtils.js
--- a/toolkit/modules/tests/xpcshell/test_NewTabUtils.js
+++ b/toolkit/modules/tests/xpcshell/test_NewTabUtils.js
@@ -359,7 +359,7 @@ add_task(async function addFavicons() {
   await PlacesTestUtils.addVisits(visit);

   let faviconData = new Map();
-  faviconData.set("https://mozilla.com", base64URL);
+  faviconData.set("https://mozilla.com", `${base64URL}#tippytop`);
   await PlacesTestUtils.addFavicons(faviconData);

   await provider._addFavicons(links);
@@ -367,6 +367,7 @@ add_task(async function addFavicons() {
   Assert.equal(links[0].faviconLength, links[0].favicon.length, "Got the right length for the byte array");
   Assert.equal(provider._faviconBytesToDataURI(links)[0].favicon, base64URL, "Got the right favicon");
   Assert.equal(links[0].faviconSize, 1, "Got the right favicon size (width and height of favicon)");
+  Assert.equal(links[0].faviconRef, "tippytop", "Got the favicon url ref");

   // Check with http version of the link that doesn't have its own
   const nonHttps = [{url: links[0].url.replace("https", "http")}];
